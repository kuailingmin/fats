var fs = require('fs'),
	path = require('path'),
	crypto = require('crypto'),
	url = require('url');

var _ = module.exports = function () {

};

/*
 * 判断是否传递某个参数
 * */
_.hasArgv = function (argv, search) {
	var pos = argv.indexOf(search);
	var ret = false;
	while (pos > -1) {
		argv.splice(pos, 1);
		pos = argv.indexOf(search);
		ret = true;
	}
	return ret;
};

/*
 * 判断一个对象是否为数组
 * */
_.isArray = function (obj) {
	return Object.prototype.toString.call(obj) === '[object Array]';
};

/*
 * 判断一个元素是否在数组中
 * */
_.inArray = function (item, arr) {
	// 不是数组则跳出
	if (!_.isArray(arr)) {
		return false;
	}
	// 遍历是否在数组中
	for (var i = 0, k = arr.length; i < k; i++) {
		if (item == arr[i]) {
			return true;
		}
	}
	return false;
};

/*
 * 判断一个对象是否为 json
 * */
_.isJson = function (obj) {
	return typeof(obj) == "object" && Object.prototype.toString.call(obj).toLowerCase() == "[object object]" && !obj.length;
};

/*
 * 拷贝对象
 * */
_.extend = function (source, target) {
	if (typeof source === 'object' && typeof target === 'object') {
		for (var key in target) {
			if (target.hasOwnProperty(key)) {
				source[key] = _.extend(source[key], target[key]);
			}
		}
	} else {
		source = target;
	}
	return source;
};

/*
 * 补齐字符长度
 * */
_.pad = function (str, len, fill, pre) {
	if (str.length < len) {
		fill = (new Array(len)).join(fill || ' ');
		if (pre) {
			str = (fill + str).substr(-len);
		} else {
			str = (str + fill).substring(0, len);
		}
	}
	return str;
};

/*
 * MD5加密
 * */
_.md5 = function (data, len) {
	var md5sum = crypto.createHash('md5'),
		encoding = typeof data === 'string' ? 'utf8' : 'binary';
	md5sum.update(data, encoding);
	len = len || fats.config.get('project.md5Length', 7);
	return md5sum.digest('hex').substring(0, len);
};

/*
 * base64编码
 * */
_.base64 = function (data) {
	if (data instanceof Buffer) {
		//do nothing for quickly determining.
	} else if (data instanceof Array) {
		data = new Buffer(data);
	} else {
		//convert to string.
		data = new Buffer(String(data || ''));
	}
	return data.toString('base64');
};

/*
 * 读取JSON文件
 * */
_.readJSON = function (path) {
	var json = fs.readFileSync(path),
		result = {};
	try {
		result = JSON.parse(json);
	} catch (e) {
		console.error('parse json file[' + path + '] fail, error [' + e.message + ']');
	}
	return result;
};
