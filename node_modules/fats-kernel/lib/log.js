var logger = module.exports = function () {
};

logger.L_ALL    = 0x01111;
logger.L_NOTIC  = 0x00001;
logger.L_DEBUG  = 0x00010;
logger.L_WARNI  = 0x00100;
logger.L_ERROR  = 0x01000;
logger.L_NORMAL = 0x01101;

logger.level = logger.L_NORMAL;
logger.throw = false;
logger.alert = false;

logger.now = function(withoutMilliseconds){
	var d = new Date(), str;
	str = [
		d.getHours(),
		d.getMinutes(),
		d.getSeconds()
	].join(':').replace(/\b\d\b/g, '0$&');
	if(!withoutMilliseconds){
		str += '.' + ('00' + d.getMilliseconds()).substr(-4);
	}
	return str;
};

function log(type, msg, code){
	code = code || 0;
	if((logger.level & code) > 0){
		var listener = logger.on[type];
		if(listener){
			listener(msg);
		}
		logger.on.any(type, msg);
	}
}

logger.debug = function(msg){
	log('debug', logger.now() + ' ' + msg, logger.L_DEBUG);
};

logger.notice = function(msg){
	log('notice', msg, logger.L_NOTIC);
};

logger.warning = function(msg){
	log('warning', msg, logger.L_WARNI);
};

logger.error = function(err){
	if(!(err instanceof Error)){
		err = new Error(err.message || err);
	}
	if(logger.alert){
		err.message += '\u0007';
	}
	if(logger.throw){
		throw err
	} else {
		log('error', err.message, logger.L_ERROR);
		process.exit(1);
	}
};

logger.on = {
	any     : function(type, msg){},
	debug   : function(msg){ process.stdout.write('\n [DEBUG] ' + msg + '\n'); },
	notice  : function(msg){ process.stdout.write('\n [NOTIC] ' + msg + '\n'); },
	warning : function(msg){ process.stdout.write('\n [WARNI] ' + msg + '\n'); },
	error   : function(msg){ process.stdout.write('\n [ERROR] ' + msg + '\n'); }
};