/*
 * fats server command
 * */
exports.name = 'server';
exports.usage = '<command> [options]';
exports.desc = 'launch a web server';
exports.register = function (commander) {

	var fats = require('fats-kernel');
	var serverRoot = process.cwd();
	var ip = require('ip').address();
	var welcomePage = fats.config.get('welcomePage');
	if (!welcomePage) {
		welcomePage = 'undefined';
	} else if (fats.util.isArray(welcomePage)) {
		welcomePage = welcomePage.join(',');
	}

	var daemonErrMsg = {
		'8': 'port is already in use'
	};


	// output version info
	var first = process.argv[3];
	if (first === '-v' || first === '--version') {
		fats.util.version(__dirname + '/package.json');
		process.exit(0);
	}

	commander
		.option('-w, --watch <switch>', 'on/off, automatic refresh browsers', String, 'off')
		.option('-r, --root <root>', 'document root', String, serverRoot)
		.option('-p, --port <port>', 'server listen port', 3000)
		.option('-n, --hostname <hostname>', 'server use hostname', String, '')
		.action(function () {

			var webServerName = 'fats server';
			var path = require('path');
			var fs = require('fs');
			var args = Array.prototype.slice.call(arguments);
			var options = args.pop();
			var cmd = args.shift();
			var root = options.root || serverRoot;
			var port = parseInt(options.port);
			var watch = options.watch;
			var hostname = options.hostname != '' ? options.hostname : ip;

			var daemon = require('daemonize2').setup({
				main: path.join(__dirname, './server.js'),
				name: webServerName,
				silent: true,
				pidfile: 'fatsDaemon.pid',
				argv: ['--welcomePage', welcomePage, '--root', root, '--port', port, '--watch', watch, '--hostname', hostname]
			});

			// startEvent
			var startEvent = function () {
				var pid = daemon.status();
				if (pid) {
					var serverCfg = fats.util.readJSON(__dirname + '/server.json');
					var msg = webServerName + ' is already running on ' + serverCfg.hostname + ':' + serverCfg.port;
					fats.log.warning(msg);
					process.exit(0);
				} else {

					var config = {
							root: root,
							port: port,
							watch: watch,
							hostname: hostname || ip
						},
						cfgStr = JSON.stringify(config);

					daemon.start(function (err, pid) {

						if (err) {
							fats.log.error(daemonErrMsg[err.message] || 'unkonw error');
							process.exit(0);
						} else {

							/*
							 * write server config to file
							 * */
							fs.writeFileSync(__dirname + '/server.json', cfgStr);

							/*
							 * open browser
							 * */
							var host;
							if (hostname.length == 0) {
								host = ip;
							} else {
								host = hostname;
							}

							var msg = webServerName + ' is running on ' + host + ':' + config.port;
							fats.log.info(msg);

							fats.util.openURL('http://' + host + ':' + port);

							setTimeout(function () {
								process.exit(0);
							}, 1000);
						}

					});
				}
			};

			// restartEvent
			var restartEvent = function () {
				var serverCfg = fats.util.readJSON(__dirname + '/server.json'), daemon;

				daemon = require('daemonize2').setup({
					main: path.join(__dirname, './server.js'),
					name: webServerName,
					silent: true,
					pidfile: 'fatsDaemon.pid',
					argv: ['--welcomePage', welcomePage, '--root', root || serverCfg.root, '--port', port || serverCfg.port, '--watch', watch || serverCfg.watch, '--hostname', hostname || serverCfg.hostname]
				});

				daemon.stop(function (err) {
					daemon.start(function (err, pid) {
						if (err) {
							fats.log.error(daemonErrMsg[err.message] || 'unkonw error');
							process.exit(0);
						} else {
							var msg = webServerName + ' is restart on ' + hostname + ':' + port;
							fats.log.info(msg);

							var config = {
									root: root,
									port: port,
									watch: watch,
									hostname: hostname || ip
								},
								cfgStr = JSON.stringify(config);
							fs.writeFileSync(__dirname + '/server.json', cfgStr);
							process.exit(0);
						}
					});

				});
			};

			switch (cmd) {
				case 'start':
					startEvent();
					break;

				case 'restart':
					restartEvent();
					break;

				case 'status':
					var pid = daemon.status(), msg;
					if (pid) {
						var serverCfg = fats.util.readJSON(__dirname + '/server.json');
						msg = webServerName + ' is running on ' + serverCfg.hostname + ':' + serverCfg.port;
					} else {
						msg = webServerName + ' server is not started'
					}
					fats.log.info(msg);
					process.exit(0);
					break;

				case 'stop':
					daemon.stop(function () {
						fats.log.info(webServerName + ' has been stopped');
						process.exit(0);
					});
					break;

				default:
					commander.help();
					return;

			}

		}).on('--help', function () {
			console.log('  Examples:');
			console.log('');
			console.log('    $ fats server start');
			console.log('    $ fats server start -w off -p 3000');
			console.log('    $ fats server stop');
			console.log('');
		});

	commander
		.command('start')
		.description('start server');

	commander
		.command('stop')
		.description('shutdown server');

	commander
		.command('restart')
		.description('restart server');

};