/*
 * parse arguments
 * */
var argv = {}, args = process.argv.splice(2);
for (var i = 0; i < args.length; i += 2) {
	argv[args[i].replace(/^-+/, '')] = args[i + 1];
}
if (!argv.welcomePage || argv.welcomePage == 'undefined') {
	argv.welcomePage = false;
}


/*
 * web server info
 * */
var package = require('../../package.json');
var AppName = package.name;
var Version = package.version;

/*
 * mimeTypes
 * */
var mime = {
	'css': 'text/css',
	'gif': 'image/gif',
	'html': 'text/html;charset=utf-8',
	'htm': 'text/html;charset=utf-8',
	'shtml': 'text/html;charset=utf-8',
	'ico': 'image/x-icon',
	'jpeg': 'image/jpeg',
	'jpg': 'image/jpeg',
	'js': 'text/javascript',
	'json': 'application/json',
	'pdf': 'application/pdf',
	'png': 'image/png',
	'svg': 'image/svg+xml',
	'swf': 'application/x-shockwave-flash',
	'tiff': 'image/tiff',
	'txt': 'text/plain',
	'wav': 'audio/x-wav',
	'wma': 'audio/x-ms-wma',
	'wmv': 'video/x-ms-wmv',
	'xml': 'text/xml'
};

var http = require('http');
var fs = require('fs');
var url = require('url');
var path = require('path');
var fats = require('fats-kernel');
var template = fats.template;

var server = http.createServer(function (req, res) {

	/*
	 * output err page
	 * */
	var sendErrorPage = function (errCode) {
		if (!errCode) {
			errCode = 404;
		}
		res.writeHead(errCode, {'Content-Type': 'text/html', 'Server': AppName + '/' + Version});
		var pageContent;
		if (errCode == 500) {
			pageContent = fs.readFileSync(__dirname + '/lib/50x.html');
		} else {
			pageContent = fs.readFileSync(__dirname + '/lib/40x.html');
		}
		pageContent = pageContent.toString().replace(/{appname}/g, AppName).replace(/{version}/g, Version);
		res.write(pageContent);
		res.end();
	};

	var root = argv.root,
		reqUrl = req.url,
		RegExpMock = /^\/mock\/.*?/i,
		staticRegExp = /\.(css|js|json|less|sass|jpg|jpeg|gif|png|bmp)$/i;


	/*
	 * mock api
	 * */
	if (RegExpMock.test(reqUrl)) {
		try {
			var conf = fats.util.readJSON(root + '/.mock/conf.json');
			var parse = url.parse(reqUrl),
				pathname = parse.pathname;

			// not find config
			if (!conf.hasOwnProperty(pathname)) {
				sendErrorPage();
				return;
			}

			// find config
			var fileName = conf[pathname],
				filePath = path.join(root, '/.mock/', fileName);
			// not exists
			if (!fats.util.exists(filePath)) {
				sendErrorPage();
				return;
			}

			var html;
			try {
				delete require.cache[filePath];
				// eval file
				html = require(filePath)(req, res, fats);
				if ('string' != typeof html) {
					sendErrorPage(500);
					return;
				}
			} catch (e) {
				// output file content
				html = fats.util.read(filePath);
			}

			// output mock data
			res.writeHead(200, {'Content-Type': 'text/html', 'Server': AppName + '/' + Version});
			res.end(html);
			return;
		} catch (e) {
			sendErrorPage();
		}
	}

	/*
	 * Index
	 * */
	var welcomePage = false, customWelcomePage = argv.welcomePage,
		defaultIndex = [
			'index.html',
			'index.htm',
			'default.html',
			'default.htm'
		];
	if (!fats.util.isArray(customWelcomePage)) {
		if (/,/.test(customWelcomePage)) {
			customWelcomePage = customWelcomePage.split(',');
		} else if (customWelcomePage) {
			customWelcomePage = [customWelcomePage];
		} else {
			customWelcomePage = [];
		}
	}
	customWelcomePage = customWelcomePage.concat(defaultIndex);
	for (var i = 0; i < customWelcomePage.length; i++) {
		var _temp = path.join(argv.root, path.normalize(customWelcomePage[i].replace(/\.{2,}/g, '')));
		if (fats.util.exists(_temp)) {
			welcomePage = customWelcomePage[i];
			break;
		}
	}

	var pathname = url.parse(req.url).pathname;
	if (pathname.slice(-1) === '/') {
		pathname += welcomePage;
	}
	var realPath = path.join(argv.root, path.normalize(pathname.replace(/\.{2,}/g, '')));

	path.exists(realPath, function (exists) {
		if (!exists) {
			sendErrorPage();
		} else {
			fs.readFile(realPath, 'binary', function (err, file) {
				if (err) {
					sendErrorPage(500);
				} else {

					if (!staticRegExp.test(pathname)) {
						/*
						 * mock cookie
						 * */
						try {
							var conf = fats.util.readJSON(root + '/.mock/conf.json');
							if (conf.hasOwnProperty('cookie')) {
								var cookieData = conf.cookie;
								if ('string' == typeof cookieData && /.*=.*/.test(cookieData)) {
									res.setHeader('Set-Cookie', cookieData + ';path=/;HttpOnly');
								} else if (fats.util.isJson(cookieData)) {
									var data = [];
									for (var key in cookieData) {
										var value = cookieData[key];
										if (fats.util.isJson(value)) {
											value = JSON.parse(value);
										}
										data.push(key + '=' + encodeURI(value) + ';path=/;HttpOnly');
									}
									res.setHeader('Set-Cookie', data);
								} else if (fats.util.isArray(cookieData)) {
									var data = [];
									for (var i = 0; i < cookieData.length; i++) {
										var _temp = cookieData[i];
										if ('string' == typeof _temp && /.*=.*/.test(_temp)) {
											_temp += ';path=/;HttpOnly';
											data.push(encodeURI(_temp) + ';path=/;HttpOnly');
										}
									}
									res.setHeader('Set-Cookie', data);
								}

							}
						} catch (e) {
						}
					}


					var ext = path.extname(realPath);
					ext = ext ? ext.slice(1) : 'unknown';
					var contentType = mime[ext] || 'text/plain';
					res.writeHead(200, {'Content-Type': contentType, 'Server': AppName + '/' + Version});

					template.config('extname', '');
					template.config('openTag', argv.templateOpenTag || '{{');
					template.config('closeTag', argv.templateCloseTag || '}}');
					template.config('cache', false);
					template.config('escape', false);
					template.config('encoding', 'binary');
					if (fats.util.inArray(ext, ['htm', 'html', 'shtml'])) {

						// template parse
						try {
							var html = template(realPath, {});
							file = html.toString();
						} catch (err) {
							res.end(err);
						}

						// ssi parse
						// TODO

					}

					// output
					if ('on' == argv.watch && fats.util.inArray(ext, ['html', 'htm', 'shtml']) && req.headers['x-requested-with'] != 'XMLHttpRequest') {
						var append = fs.readFileSync(__dirname + '/lib/socket.io.client.html');
						var ip = require('ip').address();
						append = append.toString().replace(/{webSocketServer}/g, ip + ':' + argv.port);
						file += '\n' + append;
					}
					res.write(file, 'binary');
					res.end();
				}
			});
		}
	});


});


var timer = null;
var watchEvent = function (dir, sockets) {
	fs.watch(dir, function (event, filename) {
		if (filename) {
			clearTimeout(timer);
			timer = setTimeout(function () {
				// reload browser
				sockets.emit('message', 'reload');
			}, 1000);
		}
	});
};

// attaches socket.io
if ('on' == argv.watch) {

	var io = require('socket.io')(server, {transports: ['websocket', 'flashsocket', 'polling']});
	io.sockets.on('connection', function (socket) {
		watchEvent(argv.root, io.sockets)
	});
}

// run server
server.listen(argv.port);

