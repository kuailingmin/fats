/*
 * parse arguments
 * */
var argv = {}, args = process.argv.splice(2);
for (var i = 0; i < args.length; i += 2) {
	argv[args[i].replace(/^-+/, '')] = args[i + 1];
}


/*
 * web server info
 * */
var package = require('../../package.json');
var AppName = package.name;
var Version = package.version;

/*
 * mimeTypes
 * */
var mime = {
	'css': 'text/css',
	'gif': 'image/gif',
	'html': 'text/html;charset=utf-8',
	'htm': 'text/html;charset=utf-8',
	'ico': 'image/x-icon',
	'jpeg': 'image/jpeg',
	'jpg': 'image/jpeg',
	'js': 'text/javascript',
	'json': 'application/json',
	'pdf': 'application/pdf',
	'png': 'image/png',
	'svg': 'image/svg+xml',
	'swf': 'application/x-shockwave-flash',
	'tiff': 'image/tiff',
	'txt': 'text/plain',
	'wav': 'audio/x-wav',
	'wma': 'audio/x-ms-wma',
	'wmv': 'video/x-ms-wmv',
	'xml': 'text/xml'
};


var http = require('http');
var fs = require('fs');
var url = require('url');
var path = require('path');
var fats = require('fats-kernel');
var template = require('art-template');


var server = http.createServer(function (req, res) {

	var welcomePage = 'index.html';
	var pathname = url.parse(req.url).pathname;
	if (pathname.slice(-1) === '/') {
		pathname += welcomePage;
	}
	var realPath = path.join(argv.root, path.normalize(pathname.replace(/\.{2,}/g, '')));

	path.exists(realPath, function (exists) {
		if (!exists) {
			res.writeHead(404, {'Content-Type': 'text/html', 'Server': AppName + '/' + Version});
			var pageNotFound = fs.readFileSync(__dirname + '/lib/40x.html');
			pageNotFound = pageNotFound.toString().replace(/{appname}/g, AppName).replace(/{version}/g, Version);
			res.write(pageNotFound);
			res.end();
		} else {
			fs.readFile(realPath, 'binary', function (err, file) {
				if (err) {
					res.writeHead(500, {'Content-Type': 'text/html', 'Server': AppName + '/' + Version});
					res.end(err);
				} else {
					var ext = path.extname(realPath);
					ext = ext ? ext.slice(1) : 'unknown';
					var contentType = mime[ext] || 'text/plain';
					res.writeHead(200, {'Content-Type': contentType, 'Server': AppName + '/' + Version});

					template.config('extname', '');
					template.config('cache', false);
					template.config('escape', false);
					template.config('encoding', 'binary');
					if (fats.util.inArray(ext, ['htm', 'html', 'shtml'])) {

						// template parse
						try {
							var html = template(realPath, {});
							file = html.toString();
						} catch (err) {
							res.end(err);
						}

						// ssi parse
						// TODO

					}

					// output
					if ('on' == argv.watch && fats.util.inArray(ext, ['html', 'htm', 'shtml']) && req.headers['x-requested-with'] != 'XMLHttpRequest') {
						var append = fs.readFileSync(__dirname + '/lib/socket.io.client.html');
						var ip = require('ip').address();
						append = append.toString().replace(/{webSocketServer}/g, ip + ':' + argv.port);
						file += append;
					}
					res.write(file, 'binary');
					res.end();
				}
			});
		}
	});


});

// attaches socket.io
if ('on' == argv.watch) {
	var io = require('socket.io')(server, {transports: ['websocket', 'flashsocket', 'polling']});
	//var io = require('socket.io')(server);
	io.sockets.on('connection', function (socket) {
		socket.on('message', function (msg) {
			io.sockets.emit('message', msg);
		});
	});
}

// run server
server.listen(argv.port);

