function csslintApp(filesArray, root) {

	require('date-format-lite');

	var fs = require('fs'),
		path = require('path'),
		fats = require('fats-kernel'),
		csslintNode = require('csslint'),
		cssfile = filesArray,
		root = root.replace(/\\/g, '/');

	var buildfile = root + '/.report/report-csslint.html',  // 生成报告文件
		tpl = __dirname + '/report-template-csslint.html'; // 报告模板

	var errorLines = [],
		worker = null;

	//校验规则配置
	function getRules() {
		var ruleset = {};
		ruleset['box-model'] = 1;
		ruleset['display-property-grouping'] = 1;
		ruleset['duplicate-properties'] = 1;
		ruleset['empty-rules'] = 1;
		ruleset['known-properties'] = 1;
		ruleset['adjoining-classes'] = 1;
		ruleset['box-sizing'] = 1;
		ruleset['compatible-vendor-prefixes'] = 1;
		ruleset['gradients'] = 1;
		ruleset['text-indent'] = 1;
		ruleset['vendor-prefix'] = 1;
		ruleset['fallback-colors'] = 1;
		ruleset['star-property-hack'] = 1;
		ruleset['underscore-property-hack'] = 1;
		ruleset['bulletproof-font-face'] = 1;
		ruleset['font-faces'] = 1;
		ruleset['import'] = 1;
		ruleset['duplicate-background-images'] = 1;
		ruleset['regex-selectors'] = 1;
		ruleset['universal-selector'] = 1;
		ruleset['unqualified-attributes'] = 1;
		ruleset['zero-units'] = 1;
		ruleset['overqualified-elements'] = 1;
		ruleset['shorthand'] = 1;
		ruleset['floats'] = 1;
		ruleset['font-sizes'] = 1;
		ruleset['ids'] = 1;
		ruleset['important'] = 1;
		ruleset['outline-none'] = 1;
		ruleset['qualified-headings'] = 1;
		ruleset['unique-headings'] = 1;
		return ruleset;
	}

	/*
	 * Lint: lints css
	 */
	function lintCSS() {

		/*
		 * 遍历待检查的文件，生成结果数据
		 * */
		var data = [];
		for (var i = 0; i < cssfile.length; i++) {
			var css = fats.util.read(cssfile[i]),
				rules = getRules(),
				_temp;
			if (css.length > 0) {
				_temp = csslintNode.CSSLint.verify(css, rules);
				_temp['file'] = cssfile[i];
				data.push(_temp);
			}
		}

		/*
		 * 控制台输出概要信息
		 * */
		var needReport = false;
		var errorTotalCount = 0;
		for (var j = 0, len = data.length; j < len; j++) {
			var errorCount = 0,
				warningCount = 0,
				file = data[j].file.replace(root, ''),
				messages = data[j].messages;

			if (messages.length > 0) {
				needReport = true;
			}

			for (var m = 0, mlen = messages.length; m < mlen; m++) {
				if (messages[m].type == 'warning') {
					warningCount += 1;
				} else if (messages[m].type == 'error') {
					errorCount += 1;
					errorTotalCount += 1;
				}
			}
			console.log(' File ' + file.cyan + ' verified: ' +
				'error ' + errorCount.toString().red.bold + ',  ' +
				'warning ' + warningCount.toString().yellow.bold);

		}


		/*
		 * 根据模板生成校验报告
		 * */
		var reportDir = path.join(root, './.report');
		if (needReport) {

			/*
			 * 如果不存在，则建立 .report 文件夹
			 * */
			if (!fats.util.exists(reportDir)) {
				fs.mkdirSync(reportDir);
			}

			var template = fats.template;
			template.config('extname', '');

			var d = fats.util.localDate();
			var html = template(tpl, {
				data: data,
				version: fats.cli.info.version,
				time: d.format('UTC:YYYY-MM-DD hh:mm:ss')
			});
			// 写入报告文件
			fs.writeFileSync(buildfile, html);
			// 控制台提示报告已写入
			console.log(' Report file has been created: '.yellow.bold + buildfile.cyan.bold);
		} else {
			// 如果存在，则删除文件
			if (fats.util.exists(buildfile)) {
				fs.unlinkSync(buildfile);
			}
		}


		if (errorTotalCount > 0) {
			fats.log.error('Task has been terminated');
			process.exit(0);
		}
	}

	lintCSS();
}


module.exports = csslintApp;