module.exports = function () {

	var plugins = [
		'csslint',  // css校验
		'jslint',  // js校验
		'uglify',  // js格式化压缩合并
		'cleancss' // css格式化压缩合并
	];

	var fats = this;
	var path = require('path');
	var fs = require('fs');
	var taskParser = require('./taskParse');
	var taskConfig = fats.taskConfig;
	var taskList = taskConfig.taskList;
	var env = taskConfig.env;

	/*
	 * 遍历目录下的所有文件，缓存信息备用
	 * */
	var ndir = require('ndir');
	var walker = ndir.walk(env.root);
	var fileList = {};
	walker.on('dir', function (dirpath, files) {
		for (var i = 0, l = files.length; i < l; i++) {
			var info = files[i];
			if (info[1].isFile()) {
				var src = info[0].replace(/\\{1,}/g, '/');
				var regExp = /[^\x00-\xff]/i;
				if (regExp.test(src)) {
					fats.log.error('file name not allowed: ' + src, true);
				}

				// 扩展名
				var ext = path.extname(src);
				// min版本
				var minRegExp = new RegExp('[\.\-]min' + ext + '$', 'i');
				if (!fats.util.inArray(ext, ['.psd', '.doc']) && !minRegExp.test(src)) {
					var data = fats.util.read(src);
					var _temp = {
						md5: fats.util.md5(data),
						size: info[1].size
					};
					fileList[src] = _temp;
				}
			}
		}
	});
	walker.on('error', function (err, errPath) {
		fats.log.error('%s error: %s', errPath, err);
	});
	walker.on('end', function () {
		cacheTask();
		runTask();
//		console.log(fileList);
	});

	/*
	 * 解析并缓存所有任务
	 * */
	var cacheTask = function () {
		var topParsed = taskList._parsed = {};

		for (var taskName in taskList) {

			/*
			 * 注册任务名称，合法的则执行，不合法的则直接抛弃
			 * */
			if (!fats.util.inArray(taskName, plugins)) {
				continue;
			}

			/*
			 * taskObject: 系统规定的任务名称，如：csslint
			 * 对应相应的功能模块，不可更改
			 * */
			var taskObject = taskList[taskName];
			topParsed[taskName] = {};

			for (var subTaskKey in taskObject) {

				/*
				 * subTaskKey: 用户自定义的任务组名称，不具有实际意义，如：task1
				 * subTask: 具体的子任务组
				 * subTaskOptions: 具体子任务组的 options 项
				 * subTaskConfigKey: 具体子任务的任务分组名称，不具备实际意义
				 * */
				var subTask = taskObject[subTaskKey];

				var _parsed = {};
				_parsed.taskList = {};

				for (var subTaskConfigKey in subTask) {

					/*
					 * 解析 options 项
					 * */
					if ('options' == subTaskConfigKey) {
						var subTaskOptions = subTask.options;
						_parsed.options = {};
						for (var optionsKey in subTaskOptions) {
							if ('undefined' != typeof taskParser[optionsKey]) {
								var parsed = taskParser[optionsKey](subTaskOptions[optionsKey]);
								_parsed.options[optionsKey] = parsed;
							} else {
								_parsed.options[optionsKey] = subTaskOptions[optionsKey];
							}
						}
					} else {
						/*
						 * 解析其余任务分组，并剔除重复任务
						 * */
						if (fats.util.inArray(taskName, ['uglify', 'cleancss'])) {  //压缩格式化合并

							var _tempSubTask = subTask[subTaskConfigKey];
							if (_tempSubTask.hasOwnProperty('src') && _tempSubTask.hasOwnProperty('dest')) {
								var src = taskParser.filesPara(_tempSubTask.src, true) + '$';
								var dest = taskParser.filesPara(_tempSubTask.dest);
								_parsed.taskList[dest] = src;
							} else {
								for (var _key in _tempSubTask) {
									var src = taskParser.filesPara(_tempSubTask[_key], true) + '$';
									var dest = taskParser.filesPara(_key);
									_parsed.taskList[dest] = src;
								}
							}

						} else if (fats.util.inArray(taskName, ['csslint', 'jslint'])) {  //校验
							if ('files' == subTaskConfigKey) {
								var src = subTask[subTaskConfigKey], _temp = [];
								if ('string' == typeof src && !/,/.test(src)) {
									_temp.push(taskParser.filesPara(src, true) + '$');
								} else if (fats.util.isArray(src)) {
									for (var i = 0; i < src.length; i++) {
										_temp.push(taskParser.filesPara(src[i], true) + '$');
									}
								}
								_parsed.taskList.files = _temp;
							}

						}
					}

				}


				/*
				 * 缓存至顶层备用
				 * */
				topParsed[taskName][subTaskKey] = _parsed;

			}

		}

	};


	/*
	 * 顺序执行任务
	 * */
	var runTask = function () {

		var topParsed = taskConfig.taskList._parsed;

		for (var taskName in topParsed) {
			if (fats.util.inArray(taskName, ['uglify', 'cleancss'])) {  //压缩格式化合并
				var _tempTask = topParsed[taskName];
				for (var _tempGroupName in _tempTask) {
					var _tempSubTask = _tempTask[_tempGroupName];
					for (var dest in _tempSubTask.taskList) {
						var regex = _tempSubTask.taskList[dest];
						var result = taskParser.regexFiles(regex, fileList);  // src
						var destFileName = path.join(taskConfig.env.root, dest);  // dest
						var srcFileSize = result.totalSize;  // src size
						var code, resultSize;

						switch (taskName) {

							case 'uglify' :

								var UglifyJS = require('uglify-js');
								code = UglifyJS.minify(result.files).code;
								if (_tempSubTask.options && _tempSubTask.options.banner) {
									code = _tempSubTask.options.banner + code;
								}
								resultSize = code.length;
								break;

							case 'cleancss' :

								// minify
								var CleanCSS = require('clean-css'),
									cleancss = new CleanCSS({
										compatibility: fats.config.get('cssCompatibility') || ''
									});
								var temp = '';
								for (var i = 0; i < result.files.length; i++) {
									temp += fats.util.read(result.files[i], true);
								}
								code = cleancss.minify(temp);

								// banner
								if (_tempSubTask.options && _tempSubTask.options.banner) {
									code = _tempSubTask.options.banner + code;
								}

								// md5 && urlPrefix
								code = taskParser.cssImgMD5({
									source: code,
									fileList: fileList,
									destRoot: path.dirname(destFileName),
									urlPrefix: 'undefined' != typeof _tempSubTask.options.urlPrefix ? _tempSubTask.options.urlPrefix : false
								});
								resultSize = code.length;
								break;
						}

						// write file
						(function(dest, destFileName, code, srcFileSize, resultSize){
							srcFileSize = fats.util.formatFileSize(srcFileSize);
							resultSize = fats.util.formatFileSize(resultSize);
							fs.writeFile(destFileName, code, function (err) {
								if (err) {
									msg = err.toString();
									console.log(' ' + msg.bold.red);
								} else {
									var key = destFileName.replace(/\\/g, '/');
									fileList[key] = {
										md5: fats.util.md5(code),
										size: code.length
									};
									console.log(' File ' + dest.cyan + ' created: ' + srcFileSize.green + ' → ' + resultSize.green);
								}
							});
						})(dest, destFileName, code, srcFileSize, resultSize);


						/*console.log(taskName);
						 console.log(destFileName);
						 console.log(result);
						 console.log('===============================');*/
					}
				}

			} else if (fats.util.inArray(taskName, ['csslint', 'jslint'])) {  //校验

				var _tempTask = topParsed[taskName];
				for (var _tempGroupName in _tempTask) {
					var _tempSubTask = _tempTask[_tempGroupName];
					var regex = _tempSubTask.taskList.files;
					var result = taskParser.regexFiles(regex, fileList);   // 待处理的文件数组
					/*console.log(taskName);
					 console.log(result);
					 console.log('===============================');*/
				}

			}
		}

	};

	/*
	 * 执行系统累加任务
	 * */


//	console.log(topParsed.uglify);

//	console.log(taskConfig);


	/*var path = require('path');
	 var file = 'D:/web/demo/css/demo.css';
	 var result = path.join(path.dirname(file), './images/bg.png');
	 console.log(result);*/

};